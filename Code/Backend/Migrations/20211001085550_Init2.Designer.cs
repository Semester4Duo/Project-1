// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieMatcher.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MovieMatcher.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211001085550_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MovieMatcher.Context.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApiId")
                        .HasColumnType("integer");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<string>("Poster")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Runtime")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<float>("VoteAverage")
                        .HasColumnType("real");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieMatcher.Context.MovieMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Matched")
                        .HasColumnType("boolean");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.Property<bool>("Watched")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("MovieMatch");
                });

            modelBuilder.Entity("MovieMatcher.Context.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApiId")
                        .HasColumnType("integer");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<string>("Poster")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Runtime")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<float>("VoteAverage")
                        .HasColumnType("real");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("MovieMatcher.Context.SeriesMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Matched")
                        .HasColumnType("boolean");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.Property<bool>("Watched")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("SeriesMatch");
                });

            modelBuilder.Entity("MovieMatcher.Context.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieMatcher.DTO.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieMatcher.Context.MovieMatch", b =>
                {
                    b.HasOne("MovieMatcher.Context.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.HasOne("MovieMatcher.Context.User", "User")
                        .WithMany("MovieMatches")
                        .HasForeignKey("UserId");

                    b.HasOne("MovieMatcher.Context.User", null)
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieMatcher.Context.SeriesMatch", b =>
                {
                    b.HasOne("MovieMatcher.Context.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("MovieMatcher.Context.User", "User")
                        .WithMany("SeriesMatches")
                        .HasForeignKey("UserId");

                    b.HasOne("MovieMatcher.Context.User", null)
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieMatcher.DTO.Genre", b =>
                {
                    b.HasOne("MovieMatcher.Context.Movie", null)
                        .WithMany("Genres")
                        .HasForeignKey("MovieId");

                    b.HasOne("MovieMatcher.Context.Series", null)
                        .WithMany("Genres")
                        .HasForeignKey("SeriesId");
                });

            modelBuilder.Entity("MovieMatcher.Context.Movie", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("MovieMatcher.Context.Series", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("MovieMatcher.Context.User", b =>
                {
                    b.Navigation("MovieMatches");

                    b.Navigation("SeriesMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
